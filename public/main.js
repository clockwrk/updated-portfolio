"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},app=angular.module("myApp",["ui.router","ui.bootstrap","ngAnimate","angular-typed"]);app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function($stateProvider,$urlRouterProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1}),$urlRouterProvider.otherwise("/")}]),app.directive("navbar",["$rootScope","$state","authFactory",function($rootScope,$state,authFactory){return{restrict:"E",scope:{},templateUrl:"js/navBar/navbar.html",link:function(scope){scope.showLink=function(link){return!link.isAdmin&&("admin"===link.state||"login"===link.state)},scope.isLoggedIn=function(){return authFactory.isAdmin()},scope.links=[{label:"Home",state:"home"},{label:"Projects",state:"projects"},{label:"About Me",state:"about"}]}}}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("about",{url:"/about",templateUrl:"/js/about/about.html",authenticate:!1})}]),app.controller("adminController",["$scope","$state","adminFactory","allProjects","authFactory",function($scope,$state,adminFactory,allProjects,authFactory){$scope.submitProject=function(project){adminFactory.postProject(project),$scope.project=null},$scope.allProjects=allProjects||[{id:0,name:"empty",deploy:"empty",gitHub:"empty"}],$scope.data={availableProjects:$scope.allProjects,selectedProject:{id:0,name:"empty",deploy:"empty",gitHub:"empty",description:"empty"}},$scope.selectedprojectChanged=function(){$scope.currentProject=$scope.selectedItem},$scope.logOut=function(){authFactory.logOut(),$state.go("home")}}]),app.directive("projectEdit",["projectFactory",function(projectFactory){return{restrict:"E",scope:{project:"=project"},templateUrl:"adminEdit.html"}}]),app.factory("adminFactory",["$http",function($http){return{postProject:function(project){return $http.post("/api/project",project).then(function(response){return response.data}).catch()},getAllProjects:function(){return $http.get("/api/project").then(function(response){return response.data}).catch()}}}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{url:"/admin",templateUrl:"/js/admin/admin.html",controller:"adminController",authenticate:!0,resolve:{allProjects:["adminFactory",function(adminFactory){return adminFactory.getAllProjects()}]}})}]),app.controller("contactController",["$scope","posts","feedBackFactory",function($scope,posts,feedBackFactory){$scope.posts=posts,$scope.getReplies=feedBackFactory.getReplies,$scope.postReply=function(postId,content){var replyInfo={postId:postId,content:content};feedBackFactory.postReplY(replyInfo)},$scope.submitForm=function(data){feedBackFactory.postComment(data).then(function(newPost){$scope.posts[$scope.posts.length]=newPost}).catch(),$scope.user=null,$scope.userForm.$setPristine(!0)},$scope.clear=function(){$scope.user=null,$scope.userForm.$setPristine(!0)},$scope.submit=function(){$scope.message&&$scope.email&&$scope.name&&controllerFactory.sendMessage($scope.name,$scope.email,$scope.message)}}]),app.directive("replies",function(){return console.log("post directive"),{restrict:"E",scope:{post:"="},templateUrl:"js/contact/template/replyView.html",link:function(scope,element,attrs){scope.replies=[{label:"Home",state:"home"},{label:"Projects",state:"projects"},{label:"About Me",state:"about"},{label:"Contact Me",state:"contact"}]}}}),app.factory("feedBackFactory",["$http",function($http){console.log("In the feeback factory");var feedBackFactory={};return feedBackFactory.getPosts=function(){return $http.get("/api/comment").then(function(response){return console.log("getting comments"),response.data}).catch()},feedBackFactory.postComment=function(content){return console.log("Posting comment"),$http.post("/api/comment",content).then(function(succesfulComment){return console.log(succesfulComment),succesfulComment.data}).catch()},feedBackFactory.getReplies=function(commentId){return $http.get("/api/reply/"+commentId).then(function(replies){return console.log("got comments"),replies.data}).catch()},feedBackFactory.postReplY=function(message){return console.log("running post reply",message),$http.post("/api/reply/",{post_id:parseInt(message.postId.postId),content:message.content.content}).then(function(postedComment){return postedComment.data})},feedBackFactory}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("contact",{url:"/contact",templateUrl:"/js/contact/contact.html",controller:"contactController",authenticate:!1,resolve:{posts:["feedBackFactory",function(feedBackFactory){return console.log("invoking feedBackFactory"),feedBackFactory.getPosts()}]}})}]),console.log("bar ctrl loaded"),app.controller("BarCtrl",["$scope","$timeout",function($scope,$timeout){$scope.timeInMs=0,$timeout(function countUp(){$scope.timeInMs+=500,$timeout(countUp,500)},500)}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("home",{url:"/",templateUrl:"/js/home/home.html",controller:"BarCtrl",authenticate:!1})}]),app.controller("loginController",["$scope","$state","authFactory","$location",function($scope,$state,authFactory,$location){$scope.login=function(){var loginInfo={name:$scope.username,password:$scope.password};authFactory.login(loginInfo).then(function(result){console.log(result),$state.go("home",{},{reload:!0}),$location.path("/")}).catch()}}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"/js/login/login.html",controller:"loginController",authenticate:!1})}]),app.controller("authController",["$scope","authFactory",function($scope,authFactory){$scope.isAdmin=authFactory.isAdmin()}]),app.factory("authFactory",["$http","$state","$rootScope",function($http,$state,$rootScope){return{isAdmin:function(){return!!$rootScope.admin},login:function(loginInfo){return $http.get("/api/authentication/"+loginInfo.name+"/"+loginInfo.password).then(function(authenticationDecision){return authenticationDecision.data?$rootScope.admin=!0:$rootScope.admin=!1,authenticationDecision}).catch()},logOut:function(){$rootScope.admin=null}}}]),app.controller("projectController",["$scope","allProjects",function($scope,allProjects){$scope.projects=allProjects}]),app.controller("singleProjectController",["$scope","projectFactory","currentProject","$sce",function($scope,projectFactory,currentProject,$sce){$scope.currentProject=currentProject,$scope.trustSrc=function(src){return $sce.trustAsResourceUrl(src)},$scope.movie={src:$scope.currentProject.videoLink},$scope.hasVideoLink=function(){return!!currentProject.videoLink}}]),app.directive("projectTile",function(){return{restrict:"E",scope:{project:"="},templateUrl:"js/projects/singleProject/singleProjectTile.html"}}),app.factory("projectFactory",["$http",function($http){var getData=function(response){return response.data};return{getAllProjects:function(){return $http.get("/api/project").then(getData).catch()},getSingleProject:function(projectID){return $http.get("/api/project/"+projectID).then(getData).catch()},postProject:function(project){return $http.post("/api/project",project).then(getData).catch()},updateProject:function(updatedProject){return $http.put("api/project",updatedProject).then(getData).catch()}}}]),app.config(["$stateProvider",function($stateProvider){$stateProvider.state("projects",{url:"/projects",templateUrl:"/js/projects/projects.html",controller:"projectController",authenticate:!1,resolve:{allProjects:["projectFactory",function(projectFactory){return projectFactory.getAllProjects()}]}}),$stateProvider.state("singleProject",{url:"/projects/:id",templateUrl:"/js/projects/singleProject/singleProject.html",controller:"singleProjectController",authenticate:!1,resolve:{currentProject:["projectFactory","$stateParams",function(projectFactory,$stateParams){return projectFactory.getSingleProject($stateParams.id)}]}})}]);var gulp=require("gulp");rename=require("gulp-rename"),uglify=require("gulp-uglify"),gulp.task("compress",function(){gulp.src("js/*.js").pipe(uglify()).pipe(rename("typed.min.js")).pipe(gulp.dest("dist"))}),gulp.task("default",["compress"]),function(){console.log("ab.Typeit about to"),angular.module("ab.Typeit",[]).directive("abTypeit",function(){return coneole.log("running the wrapper"),{restrict:"A",scope:{typeitStrings:"=abTypeit",typeitLoop:"=",typeitLoopDelay:"=",typeitBreakLines:"=",typeitSpeed:"=",typeitLifeLike:"=",typeitCursor:"=",typeitCursorSpeed:"=",typeitStartDelay:"=",typeitBreakDelay:"="},controller:["$scope","$element","$attrs",function($scope,$element,$attrs){var typeItElement=$($element);try{typeItElement.typeIt({strings:$scope.typeitStrings,loop:$scope.typeitLoop,loopDelay:$scope.typeitLoopDelay,breakLines:$scope.typeitBreakLines,speed:$scope.typeitSpeed,lifeLike:$scope.typeitLifeLike,cursor:$scope.typeitCursor,cursorSpeed:$scope.typeitCursorSpeed,startDelay:$scope.typeitStartDelay,breakDelay:$scope.typeitBreakDelay})}catch(e){console.error("OH NO! angular-typeit requires typeit.js on your page - do you have it loaded?")}}]}})}(),window.onload=function(){$(".developer").typed({strings:["Front-end","Back-end","Fullstack","Software","JavaScript","AngularJS","UI/UX"],typeSpeed:250,loop:!0,cursorSpeed:100,lifeLike:!0,curser:!0,deleteSpeed:1e3})},function(t){var s=function(_s,e){this.el=t(_s),this.options=t.extend({},t.fn.typed.defaults,e),this.isInput=this.el.is("input"),this.attr=this.options.attr,this.showCursor=!this.isInput&&this.options.showCursor,this.elContent=this.attr?this.el.attr(this.attr):this.el.text(),this.contentType=this.options.contentType,this.typeSpeed=this.options.typeSpeed,this.startDelay=this.options.startDelay,this.backSpeed=this.options.backSpeed,this.backDelay=this.options.backDelay,this.stringsElement=this.options.stringsElement,this.strings=this.options.strings,this.strPos=0,this.arrayPos=0,this.stopNum=0,this.loop=this.options.loop,this.loopCount=this.options.loopCount,this.curLoop=0,this.stop=!1,this.cursorChar=this.options.cursorChar,this.shuffle=this.options.shuffle,this.sequence=[],this.build()};s.prototype={constructor:s,init:function(){var t=this;t.timeout=setTimeout(function(){for(var s=0;s<t.strings.length;++s)t.sequence[s]=s;t.shuffle&&(t.sequence=t.shuffleArray(t.sequence)),t.typewrite(t.strings[t.sequence[t.arrayPos]],t.strPos)},t.startDelay)},build:function(){var s=this;if(this.showCursor===!0&&(this.cursor=t('<span class="typed-cursor">'+this.cursorChar+"</span>"),this.el.after(this.cursor)),this.stringsElement){this.strings=[],this.stringsElement.hide(),console.log(this.stringsElement.children());var e=this.stringsElement.children();t.each(e,function(e,i){s.strings.push(t(i).html())})}this.init()},typewrite:function(t,s){if(this.stop!==!0){var e=Math.round(70*Math.random())+this.typeSpeed,i=this;i.timeout=setTimeout(function(){var e=0,r=t.substr(s);if("^"===r.charAt(0)){var o=1;/^\^\d+/.test(r)&&(r=/\d+/.exec(r)[0],o+=r.length,e=parseInt(r)),t=t.substring(0,s)+t.substring(s+o)}if("html"===i.contentType){var n=t.substr(s).charAt(0);if("<"===n||"&"===n){var a="",h="";for(h="<"===n?">":";";t.substr(s+1).charAt(0)!==h&&(a+=t.substr(s).charAt(0),!(++s+1>t.length)););s++,a+=h}}i.timeout=setTimeout(function(){if(s===t.length){if(i.options.onStringTyped(i.arrayPos),i.arrayPos===i.strings.length-1&&(i.options.callback(),i.curLoop++,i.loop===!1||i.curLoop===i.loopCount))return;i.timeout=setTimeout(function(){i.backspace(t,s)},i.backDelay)}else{0===s&&i.options.preStringTyped(i.arrayPos);var e=t.substr(0,s+1);i.attr?i.el.attr(i.attr,e):i.isInput?i.el.val(e):"html"===i.contentType?i.el.html(e):i.el.text(e),s++,i.typewrite(t,s)}},e)},e)}},backspace:function(t,s){if(this.stop!==!0){var e=Math.round(70*Math.random())+this.backSpeed,i=this;i.timeout=setTimeout(function(){if("html"===i.contentType&&">"===t.substr(s).charAt(0)){for(var e="";"<"!==t.substr(s-1).charAt(0)&&(e-=t.substr(s).charAt(0),!(0>--s)););s--,e+="<"}var r=t.substr(0,s);i.attr?i.el.attr(i.attr,r):i.isInput?i.el.val(r):"html"===i.contentType?i.el.html(r):i.el.text(r),s>i.stopNum?(s--,i.backspace(t,s)):s<=i.stopNum&&(i.arrayPos++,i.arrayPos===i.strings.length?(i.arrayPos=0,i.shuffle&&(i.sequence=i.shuffleArray(i.sequence)),i.init()):i.typewrite(i.strings[i.sequence[i.arrayPos]],s))},e)}},shuffleArray:function(t){var s,e,i=t.length;if(i)for(;--i;)e=Math.floor(Math.random()*(i+1)),s=t[e],t[e]=t[i],t[i]=s;return t},reset:function(){var t=this;clearInterval(t.timeout),this.el.attr("id"),this.el.empty(),void 0!==this.cursor&&this.cursor.remove(),this.strPos=0,this.arrayPos=0,this.curLoop=0,this.options.resetCallback()}},t.fn.typed=function(e){return this.each(function(){var i=t(this),r=i.data("typed"),o="object"==(void 0===e?"undefined":_typeof(e))&&e;r&&r.reset(),i.data("typed",r=new s(this,o)),"string"==typeof e&&r[e]()})},t.fn.typed.defaults={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],stringsElement:null,typeSpeed:0,startDelay:0,backSpeed:0,shuffle:!1,backDelay:500,loop:!1,loopCount:!1,showCursor:!0,cursorChar:"|",attr:null,contentType:"html",callback:function(){},preStringTyped:function(){},onStringTyped:function(){},resetCallback:function(){}}}(window.jQuery),function($){var Typed=function(el,options){this.el=$(el),this.options=$.extend({},$.fn.typed.defaults,options),this.isInput=this.el.is("input"),this.attr=this.options.attr,this.showCursor=!this.isInput&&this.options.showCursor,this.elContent=this.attr?this.el.attr(this.attr):this.el.text(),this.contentType=this.options.contentType,this.typeSpeed=this.options.typeSpeed,this.startDelay=this.options.startDelay,this.backSpeed=this.options.backSpeed,this.backDelay=this.options.backDelay,this.stringsElement=this.options.stringsElement,this.strings=this.options.strings,this.strPos=0,this.arrayPos=0,this.stopNum=0,this.loop=this.options.loop,this.loopCount=this.options.loopCount,this.curLoop=0,this.stop=!1,this.cursorChar=this.options.cursorChar,this.shuffle=this.options.shuffle,this.sequence=[],this.build()};Typed.prototype={constructor:Typed,init:function(){var self=this;self.timeout=setTimeout(function(){for(var i=0;i<self.strings.length;++i)self.sequence[i]=i;self.shuffle&&(self.sequence=self.shuffleArray(self.sequence)),self.typewrite(self.strings[self.sequence[self.arrayPos]],self.strPos)},self.startDelay)},build:function(){var self=this;if(this.showCursor===!0&&(this.cursor=$('<span class="typed-cursor">'+this.cursorChar+"</span>"),this.el.after(this.cursor)),this.stringsElement){this.strings=[],this.stringsElement.hide(),console.log(this.stringsElement.children());var strings=this.stringsElement.children();$.each(strings,function(key,value){self.strings.push($(value).html())})}this.init()},typewrite:function(curString,curStrPos){if(this.stop!==!0){var humanize=Math.round(70*Math.random())+this.typeSpeed,self=this;self.timeout=setTimeout(function(){var charPause=0,substr=curString.substr(curStrPos);if("^"===substr.charAt(0)){var skip=1;/^\^\d+/.test(substr)&&(substr=/\d+/.exec(substr)[0],skip+=substr.length,charPause=parseInt(substr)),curString=curString.substring(0,curStrPos)+curString.substring(curStrPos+skip)}if("html"===self.contentType){var curChar=curString.substr(curStrPos).charAt(0);if("<"===curChar||"&"===curChar){var tag="",endTag="";for(endTag="<"===curChar?">":";";curString.substr(curStrPos+1).charAt(0)!==endTag&&(tag+=curString.substr(curStrPos).charAt(0),!(++curStrPos+1>curString.length)););curStrPos++,tag+=endTag}}self.timeout=setTimeout(function(){if(curStrPos===curString.length){if(self.options.onStringTyped(self.arrayPos),self.arrayPos===self.strings.length-1&&(self.options.callback(),self.curLoop++,self.loop===!1||self.curLoop===self.loopCount))return;self.timeout=setTimeout(function(){self.backspace(curString,curStrPos)},self.backDelay)}else{0===curStrPos&&self.options.preStringTyped(self.arrayPos);var nextString=curString.substr(0,curStrPos+1);self.attr?self.el.attr(self.attr,nextString):self.isInput?self.el.val(nextString):"html"===self.contentType?self.el.html(nextString):self.el.text(nextString),curStrPos++,self.typewrite(curString,curStrPos)}},charPause)},humanize)}},backspace:function(curString,curStrPos){if(this.stop!==!0){var humanize=Math.round(70*Math.random())+this.backSpeed,self=this;self.timeout=setTimeout(function(){if("html"===self.contentType&&">"===curString.substr(curStrPos).charAt(0)){for(var tag="";"<"!==curString.substr(curStrPos-1).charAt(0)&&(tag-=curString.substr(curStrPos).charAt(0),!(--curStrPos<0)););curStrPos--,tag+="<"}var nextString=curString.substr(0,curStrPos);self.attr?self.el.attr(self.attr,nextString):self.isInput?self.el.val(nextString):"html"===self.contentType?self.el.html(nextString):self.el.text(nextString),curStrPos>self.stopNum?(curStrPos--,self.backspace(curString,curStrPos)):curStrPos<=self.stopNum&&(self.arrayPos++,self.arrayPos===self.strings.length?(self.arrayPos=0,self.shuffle&&(self.sequence=self.shuffleArray(self.sequence)),self.init()):self.typewrite(self.strings[self.sequence[self.arrayPos]],curStrPos))},humanize)}},shuffleArray:function(array){var tmp,current,top=array.length;if(top)for(;--top;)current=Math.floor(Math.random()*(top+1)),tmp=array[current],array[current]=array[top],array[top]=tmp;return array},reset:function(){var self=this;clearInterval(self.timeout);this.el.attr("id");this.el.empty(),void 0!==this.cursor&&this.cursor.remove(),this.strPos=0,this.arrayPos=0,this.curLoop=0,this.options.resetCallback()}},$.fn.typed=function(option){return this.each(function(){var $this=$(this),data=$this.data("typed"),options="object"==(void 0===option?"undefined":_typeof(option))&&option;data&&data.reset(),$this.data("typed",data=new Typed(this,options)),"string"==typeof option&&data[option]()})},$.fn.typed.defaults={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],stringsElement:null,typeSpeed:0,startDelay:0,backSpeed:0,shuffle:!1,backDelay:500,loop:!1,loopCount:!1,showCursor:!0,cursorChar:"|",attr:null,contentType:"html",callback:function(){},preStringTyped:function(){},onStringTyped:function(){},resetCallback:function(){}}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
